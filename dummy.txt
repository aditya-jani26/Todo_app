app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db' 
app.config['SECRET_KEY'] = "thisisascretkey"

db = SQLAlchemy(app)

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), nullable=False)  
    password = db.Column(db.String(80), nullable=False)
this is for the datatable


# Function to generate custom tokens
# def generate_token(user_id, username):
#     payload = {
#         'user_id': user_id,
#         'username': username,
#     }
#     token = jwt.encode(payload, app.config['SECRET_KEY'], algorithm='HS256')
#     return token

# # Function to decode and verify tokens
# def decode_token(token):
#     try:
#         payload = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
#         return payload
#     except jwt.ExpiredSignatureError:
#         return 'Signature expired. Please log in again.'
#     except jwt.InvalidTokenError:
#         return 'Invalid token. Please log in again.'

# # Middleware to protect routes
# def token_required(f):
#     @wraps(f)
    
#     def decorated(*args, **kwargs):
#         token = request.headers.get('Authorization')

#         if not token:
#             return jsonify({'message': 'Token is missing'}), 401

#         try:
#             data = decode_token(token)
#             if isinstance(data, str):
#                 return jsonify({'message': data}), 401

#             current_user = User.query.get(data['user_id'])
#             if not current_user:
#                 return jsonify({'message': 'User not found'}), 401
#         except:
#             return jsonify({'message': 'Token is invalid'}), 401

#         return f(current_user, *args, **kwargs)

#     return decorated

# @app.route('/dashboard')
# @token_required
# def dashboard(current_user):
#     return jsonify({'message': f'Welcome to the dashboard, {current_user.username}!'})

# if __name__ == '__main__':
#     app.run(debug=True)
